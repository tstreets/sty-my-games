{"version":3,"file":"component---src-pages-game-index-js-dc401d103fa26ebaa088.js","mappings":"gMAoGA,UA/Fa,SAAC,GAAmC,IAAD,IAAhCA,SAAYC,EAAoB,EAApBA,KACxB,EAD4C,EAAdC,MACtBC,SAAAA,OAAR,MAAmB,GAAnB,EAEMC,EAAYH,EAAKI,MAAM,KACvBC,EAAUF,EAAUG,OACpBJ,EAASK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAON,EAAU,MACtC,KACN,EAAwBO,EAAAA,SAAeL,GAAW,MAA3CM,EAAP,KAAaC,EAAb,KACA,EAAsCF,EAAAA,UAAe,GAA9CG,EAAP,KAAoBC,EAApB,KAR4C,wCAc5C,wFACQD,IAAeF,EADvB,wDAEIG,GAAe,GAFnB,mBAI8BC,EAAAA,EAAAA,IAAQZ,EAAU,IAJhD,OAIca,EAJd,OAKQJ,EAAQI,GALhB,0DAOIF,GAAe,GAPnB,2DAd4C,sBAuB5C,OAbAJ,EAAAA,UAAe,YAV6B,mCAWxCO,MAaA,gBAAC,WAAD,KACI,gBAAC,IAAD,KACKN,GAAQA,EAAKF,GACV,gBAAC,WAAD,KACI,gBAAC,QAAD,CAAUS,QAAQ,KACd,gBAAC,WAAD,KACI,gBAAC,IAAD,CAAQC,GAAG,MAAMR,EAAKS,OAE1B,gBAAC,WAAD,KACI,yBAAIT,EAAKU,cAEb,gBAAC,WAAD,KACI,uBACIC,UAAU,iBACVC,MAAO,CACHC,gBAAgB,OAAQb,EAAKc,YAAd,KAEnBC,KAAK,MACL,aAAYf,EAAKS,SAI7B,gBAAC,QAAD,CAAUF,QAAQ,KACd,gBAAC,WAAD,KACI,yBACI,qCADJ,IACwBP,EAAKgB,YAD7B,KAC4C,IACvChB,EAAKiB,YAFV,UAKJ,gBAAC,WAAD,KACI,yBACI,wCADJ,IAC2BjB,EAAKkB,WADhC,KAC8C,IACzClB,EAAKmB,cAIlB,gBAAC,QAAD,CAAUZ,QAAQ,KACd,gBAAC,WAAD,KACI,sBAAII,UAAU,oBACTX,EAAKoB,UAAUC,KAAI,SAACC,EAAGC,GACpB,OACI,sBACIC,IAAG,YAAcD,EACjBZ,UAAU,gBAETW,UAQ5BtB,EAOD,gBAAC,WAAD,KACI,gBAAC,WAAD,KACI,oDARR,gBAAC,WAAD,KACI,gBAAC,WAAD,KACI","sources":["webpack://sty-my-games/./src/pages/game/index.js"],"sourcesContent":["import React from 'react';\r\nimport { Grid, Header } from 'semantic-ui-react';\r\n\r\nimport { getGame } from '../../functions/db';\r\n\r\nconst Game = ({ location: { hash, state } }) => {\r\n    const { allGames = [] } = state;\r\n\r\n    const splitHash = hash.split('/');\r\n    const gameRef = splitHash.length\r\n        ? allGames.find(g => g.id === splitHash[1])\r\n        : null;\r\n    const [game, setGame] = React.useState(gameRef || null);\r\n    const [gameLoading, setGameLoading] = React.useState(false);\r\n\r\n    React.useState(() => {\r\n        attemptGetGame();\r\n    });\r\n\r\n    async function attemptGetGame() {\r\n        if (gameLoading || game) return;\r\n        setGameLoading(true);\r\n        try {\r\n            const newGame = await getGame(splitHash[1]);\r\n            setGame(newGame);\r\n        } catch {}\r\n        setGameLoading(false);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Grid>\r\n                {game && game.id ? (\r\n                    <React.Fragment>\r\n                        <Grid.Row columns='1'>\r\n                            <Grid.Column>\r\n                                <Header as='h2'>{game.name}</Header>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <p>{game.description}</p>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <div\r\n                                    className='gameinfo-image'\r\n                                    style={{\r\n                                        backgroundImage: `url(${game.backupImage})`,\r\n                                    }}\r\n                                    role='img'\r\n                                    aria-label={game.name}\r\n                                ></div>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row columns='2'>\r\n                            <Grid.Column>\r\n                                <p>\r\n                                    <span>Time:</span> {game.minPlaytime} -{' '}\r\n                                    {game.maxPlaytime} mins\r\n                                </p>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <p>\r\n                                    <span>Players:</span> {game.minPlayers} -{' '}\r\n                                    {game.maxPlayers}\r\n                                </p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row columns='1'>\r\n                            <Grid.Column>\r\n                                <ul className='gameinfo-taglist'>\r\n                                    {game.mechanics.map((m, i) => {\r\n                                        return (\r\n                                            <li\r\n                                                key={`game-tag-${i}`}\r\n                                                className='gameinfo-tag'\r\n                                            >\r\n                                                {m}\r\n                                            </li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </React.Fragment>\r\n                ) : !game ? (\r\n                    <React.Fragment>\r\n                        <Grid.Column>\r\n                            <p>No Game Found</p>\r\n                        </Grid.Column>\r\n                    </React.Fragment>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Grid.Column>\r\n                            <p>Searching For Game...</p>\r\n                        </Grid.Column>\r\n                    </React.Fragment>\r\n                )}\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"names":["location","hash","state","allGames","splitHash","split","gameRef","length","find","g","id","React","game","setGame","gameLoading","setGameLoading","getGame","newGame","attemptGetGame","columns","as","name","description","className","style","backgroundImage","backupImage","role","minPlaytime","maxPlaytime","minPlayers","maxPlayers","mechanics","map","m","i","key"],"sourceRoot":""}