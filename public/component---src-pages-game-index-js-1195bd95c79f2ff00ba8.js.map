{"version":3,"file":"component---src-pages-game-index-js-1195bd95c79f2ff00ba8.js","mappings":"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","sources":["webpack://sty-my-games/./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack://sty-my-games/./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack://sty-my-games/./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","webpack://sty-my-games/./src/pages/game/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nexport default GridRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nexport default Grid;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, Header } from 'semantic-ui-react';\r\n\r\nimport { getGame } from '../../functions/db';\r\nimport { setCurrentGame } from '../../reducers/gamesReducer';\r\n\r\nconst Game = ({\r\n    location: { hash },\r\n    allGames,\r\n    currentGame,\r\n    setCurrentGame,\r\n}) => {\r\n    const splitHash = hash.split('/');\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    React.useState(() => {\r\n        attemptGetGame();\r\n    });\r\n\r\n    async function attemptGetGame() {\r\n        if (loading || currentGame || allGames) return;\r\n        setLoading(true);\r\n        try {\r\n            const newGame = await getGame(splitHash[1]);\r\n            setCurrentGame(newGame);\r\n        } catch {}\r\n        setLoading(false);\r\n    }\r\n\r\n    const displayGame = currentGame\r\n        ? currentGame\r\n        : allGames\r\n        ? allGames.find(g => g.id === splitHash[1])\r\n        : null;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid>\r\n                {displayGame && displayGame.id ? (\r\n                    <React.Fragment>\r\n                        <Grid.Row columns='1'>\r\n                            <Grid.Column>\r\n                                <Header as='h2'>{displayGame.name}</Header>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <p>{displayGame.description}</p>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <div\r\n                                    className='gameinfo-image'\r\n                                    style={{\r\n                                        backgroundImage: `url(${displayGame.backupImage})`,\r\n                                    }}\r\n                                    role='img'\r\n                                    aria-label={displayGame.name}\r\n                                ></div>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row columns='2'>\r\n                            <Grid.Column>\r\n                                <p>\r\n                                    <span>Time:</span> {displayGame.minPlaytime}{' '}\r\n                                    - {displayGame.maxPlaytime} mins\r\n                                </p>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <p>\r\n                                    <span>Players:</span>{' '}\r\n                                    {displayGame.minPlayers} -{' '}\r\n                                    {displayGame.maxPlayers}\r\n                                </p>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row columns='1'>\r\n                            <Grid.Column>\r\n                                <ul className='gameinfo-taglist'>\r\n                                    {displayGame.mechanics.map((m, i) => {\r\n                                        return (\r\n                                            <li\r\n                                                key={`game-tag-${i}`}\r\n                                                className='gameinfo-tag'\r\n                                            >\r\n                                                {m}\r\n                                            </li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </React.Fragment>\r\n                ) : !displayGame && currentGame ? (\r\n                    <React.Fragment>\r\n                        <Grid.Column>\r\n                            <p>No Game Found</p>\r\n                        </Grid.Column>\r\n                    </React.Fragment>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Grid.Column>\r\n                            <p>Searching For Game...</p>\r\n                        </Grid.Column>\r\n                    </React.Fragment>\r\n                )}\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    setCurrentGame,\r\n};\r\n\r\nfunction mapStateToProps({ games }) {\r\n    return {\r\n        currentGame: games.currentGame,\r\n        allGames: games.allGames,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n"],"names":["GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","rest","getUnhandledProps","ElementType","getElementType","handledProps","create","GridRow","centered","columns","divided","reversed","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","Column","Row","mapDispatchToProps","setCurrentGame","connect","games","currentGame","allGames","hash","location","splitHash","split","React","loading","setLoading","getGame","newGame","attemptGetGame","displayGame","find","g","id","as","name","description","style","backgroundImage","backupImage","role","minPlaytime","maxPlaytime","minPlayers","maxPlayers","mechanics","map","m","i","key"],"sourceRoot":""}