{"version":3,"file":"component---src-pages-search-index-js-3f265df1de8e8fba1dff.js","mappings":"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","sources":["webpack://sty-my-games/./node_modules/semantic-ui-react/dist/es/elements/Loader/Loader.js","webpack://sty-my-games/./src/components/GameCard/GameCardGroup.js","webpack://sty-my-games/./src/components/GameCard/index.js","webpack://sty-my-games/./src/search/SearchForm.js","webpack://sty-my-games/./src/pages/search/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\n\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLoader.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"disabled\", \"indeterminate\", \"inline\", \"inverted\", \"size\"];\nexport default Loader;","import React from 'react';\r\nimport {} from 'semantic-ui-react';\r\n\r\nconst GameCardGroup = ({ children }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className='game-card-group'>{children}</div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GameCardGroup;\r\n","import React from 'react';\r\nimport {} from 'semantic-ui-react';\r\nimport { Link } from 'gatsby';\r\n\r\nconst GameCard = ({\r\n    id,\r\n    name,\r\n    company,\r\n    maxPlayers,\r\n    minPlayers,\r\n    age,\r\n    time,\r\n    picName,\r\n    picUrl,\r\n    state,\r\n}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <li className='game-card'>\r\n                <Link to={`/game/${id}`} state={{ ...state }}>\r\n                    <h2>{name}</h2>\r\n                    <h3>{company}</h3>\r\n                    {picName && picUrl ? (\r\n                        <div\r\n                            className='game-card-image'\r\n                            style={{\r\n                                backgroundImage: `url(${picUrl})`,\r\n                            }}\r\n                        />\r\n                    ) : null}\r\n                    <p>Time ({time}mins)</p>\r\n                    <p>Ages {age}+</p>\r\n                    <p>\r\n                        {minPlayers}-{maxPlayers} players\r\n                    </p>\r\n                </Link>\r\n            </li>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GameCard;\r\n","import React from 'react';\r\nimport { Form, Input } from 'semantic-ui-react';\r\n\r\nimport FormField from '../components/FormField';\r\n\r\nconst SearchForm = ({ filters, setFilters }) => {\r\n    function changeFilters(e, { name, value }) {\r\n        if (name === 'minPlayers' || name === 'maxPlayers') {\r\n            if (isNaN(value)) return;\r\n            setFilters({ ...filters, [name]: Number(value) });\r\n        } else {\r\n            setFilters({ ...filters, [name]: value });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Form className='search-form'>\r\n                <FormField\r\n                    control={Input}\r\n                    label='Name:'\r\n                    name='name'\r\n                    placeholder='Filter by name:'\r\n                    value={filters.name}\r\n                    onChange={changeFilters}\r\n                />\r\n                <Form.Group widths='equal'>\r\n                    <FormField\r\n                        control={Input}\r\n                        label={`Time Duration (${filters.time}mins):`}\r\n                        name='time'\r\n                        placeholder='Filter by time:'\r\n                        type='range'\r\n                        min={5}\r\n                        max={120}\r\n                        step={5}\r\n                        value={filters.time}\r\n                        onChange={changeFilters}\r\n                    />\r\n                    <FormField\r\n                        control={Input}\r\n                        label={`Recommended Age ${filters.age}+:`}\r\n                        name='age'\r\n                        placeholder='Filter by age:'\r\n                        type='range'\r\n                        min={2}\r\n                        max={19}\r\n                        step={1}\r\n                        value={filters.age}\r\n                        onChange={changeFilters}\r\n                    />\r\n                    <FormField\r\n                        control={Input}\r\n                        label='Min. Players:'\r\n                        name='minPlayers'\r\n                        placeholder='Filter by minimum players:'\r\n                        value={filters.minPlayers}\r\n                        onChange={changeFilters}\r\n                    />\r\n                    <FormField\r\n                        control={Input}\r\n                        label='Max Players:'\r\n                        name='maxPlayers'\r\n                        placeholder='Filter by maximum players:'\r\n                        value={filters.maxPlayers}\r\n                        onChange={changeFilters}\r\n                    />\r\n                </Form.Group>\r\n                <FormField\r\n                    control={Input}\r\n                    label='Company:'\r\n                    name='company'\r\n                    placeholder='Filter by company:'\r\n                    value={filters.company}\r\n                    onChange={changeFilters}\r\n                />\r\n            </Form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport 'semantic-ui-css/semantic.css';\r\nimport { Button, Container, Header, Loader } from 'semantic-ui-react';\r\n\r\nimport '../../css/styles.css';\r\nimport Navbar from '../../components/Navbar';\r\nimport { getGames } from '../../functions/db';\r\n\r\nimport GameCard from '../../components/GameCard';\r\nimport GameCardGroup from '../../components/GameCard/GameCardGroup';\r\nimport SearchForm from '../../search/SearchForm';\r\n\r\nconst Search = ({ location: { state } }) => {\r\n    const { games = [] } = state || {};\r\n    const [allGames, setAllGames] = React.useState(games);\r\n    const [allGamesLoading, setAllGamesLoading] = React.useState(false);\r\n    const [showFilters, setShowFilters] = React.useState(false);\r\n\r\n    const initialFilters = {\r\n        name: '',\r\n        age: 2,\r\n        minPlayers: 0,\r\n        maxPlayers: 10,\r\n        company: '',\r\n        time: 5,\r\n    };\r\n    const [filters, setFilters] = React.useState(initialFilters);\r\n\r\n    React.useEffect(() => {\r\n        if (!allGames.length && !allGamesLoading) {\r\n            setAllGamesLoading(true);\r\n            getGames(newAllGames => {\r\n                setAllGames(newAllGames);\r\n                setAllGamesLoading(false);\r\n            });\r\n        }\r\n    }, [setAllGames, setAllGamesLoading, allGamesLoading, allGames]);\r\n\r\n    const filtersGames = allGames\r\n        ? allGames.filter(\r\n              ({ name, company, age, minPlayers, maxPlayers, time }) => {\r\n                  if (\r\n                      filters.name &&\r\n                      !name.toLowerCase().includes(filters.name.toLowerCase())\r\n                  ) {\r\n                      return false;\r\n                  }\r\n                  if (filters.age > 2 && Number(filters.age) > Number(age)) {\r\n                      return false;\r\n                  }\r\n                  if (\r\n                      filters.company &&\r\n                      !company\r\n                          .toLowerCase()\r\n                          .includes(filters.company.toLowerCase())\r\n                  ) {\r\n                      return false;\r\n                  }\r\n                  if (\r\n                      maxPlayers &&\r\n                      (!(filters.minPlayers <= minPlayers) ||\r\n                          !(filters.maxPlayers >= maxPlayers))\r\n                  ) {\r\n                      return false;\r\n                  }\r\n                  if (filters.time > 5 && Number(filters.time) > Number(time)) {\r\n                      return false;\r\n                  }\r\n                  return true;\r\n              }\r\n          )\r\n        : [];\r\n\r\n    function toggleSearch() {\r\n        setShowFilters(!showFilters);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container className='fullsite'>\r\n                <Header className='page-header' as='h1'>\r\n                    Search\r\n                </Header>\r\n\r\n                {showFilters ? (\r\n                    <SearchForm filters={filters} setFilters={setFilters} />\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <GameCardGroup>\r\n                            <Loader active={allGamesLoading} />\r\n                            {filtersGames.length\r\n                                ? filtersGames.map((game, i) => {\r\n                                      if (!game.id) return null;\r\n                                      return (\r\n                                          <React.Fragment\r\n                                              key={`game-card-${i}`}\r\n                                          >\r\n                                              <GameCard {...game} />\r\n                                          </React.Fragment>\r\n                                      );\r\n                                  })\r\n                                : null}\r\n                        </GameCardGroup>\r\n                    </React.Fragment>\r\n                )}\r\n\r\n                <Button\r\n                    content={`${showFilters ? 'Hide' : 'Show'} Filters`}\r\n                    style={{ marginTop: '16px' }}\r\n                    icon='sync'\r\n                    color='orange'\r\n                    onClick={toggleSearch}\r\n                />\r\n\r\n                <Navbar\r\n                    className='mt-auto'\r\n                    state={{ ...state, games: allGames }}\r\n                />\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n"],"names":["Loader","props","active","children","className","content","disabled","indeterminate","inline","inverted","size","classes","rest","ElementType","handledProps","id","name","company","maxPlayers","minPlayers","age","time","picName","picUrl","state","Link","to","style","backgroundImage","filters","setFilters","changeFilters","e","value","isNaN","Number","Form","FormField","control","Input","label","placeholder","onChange","widths","type","min","max","step","location","games","React","allGames","setAllGames","allGamesLoading","setAllGamesLoading","showFilters","setShowFilters","length","getGames","newAllGames","filtersGames","filter","toLowerCase","includes","Container","Header","as","GameCardGroup","map","game","i","key","GameCard","Button","marginTop","icon","color","onClick","Navbar"],"sourceRoot":""}