{"version":3,"file":"component---src-pages-add-index-js-13fdd29ff98406bf35f8.js","mappings":"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","sources":["webpack://sty-my-games/./src/components/Add/GamePreview/index.js","webpack://sty-my-games/./src/components/WizardForm/index.js","webpack://sty-my-games/./src/functions/atlas.js","webpack://sty-my-games/./src/pages/add/index.js"],"sourcesContent":["import React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\n\r\nconst GamePreview = ({\r\n    id,\r\n    description_preview,\r\n    image_url,\r\n    max_players,\r\n    min_players,\r\n    max_playtime,\r\n    min_playtime,\r\n    mechanics,\r\n    min_age,\r\n    name,\r\n    publisher,\r\n    year_published,\r\n    mechanicsRef,\r\n    toggleSelectGame,\r\n    selectedGame,\r\n}) => {\r\n    const mechanicsList = mechanicsRef.filter(m =>\r\n        mechanics.find(mech => mech.id === m.id)\r\n    );\r\n\r\n    function selectGame() {\r\n        toggleSelectGame(\r\n            id,\r\n            {\r\n                id,\r\n                description: description_preview,\r\n                maxPlayers: max_players,\r\n                minPlayers: min_players,\r\n                maxPlaytime: max_playtime,\r\n                minPlaytime: min_playtime,\r\n                backupImage: image_url,\r\n                minAge: min_age,\r\n                year: year_published,\r\n            },\r\n            mechanicsList\r\n        );\r\n    }\r\n\r\n    const mechanicsP = mechanicsList.map((m, i) => {\r\n        return <React.Fragment key={`mech-${i}`}>{m.name}, </React.Fragment>;\r\n    });\r\n\r\n    const color = selectedGame.id === id ? 'red' : null;\r\n    const text = selectedGame.id === id ? 'Unselect' : 'Select';\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header as='h3'>{name}</Header>\r\n            <p>{description_preview || 'No description'}</p>\r\n            <p>\r\n                Players: {min_players} - {max_players}\r\n            </p>\r\n            <p>\r\n                Playtime: {min_playtime} - {max_playtime}\r\n            </p>\r\n            <p>Ages {min_age}+</p>\r\n            <p>Company: {publisher}</p>\r\n            <p>Mechanics: {mechanicsP}</p>\r\n            <Button\r\n                size='tiny'\r\n                content={text}\r\n                onClick={selectGame}\r\n                color={color}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GamePreview;\r\n","import React from 'react';\r\nimport { Form, Button, Icon, Header, Grid } from 'semantic-ui-react';\r\n\r\nrequire('./index.css');\r\n\r\nexport const WizardFormHeader = ({ children, content }) => {\r\n    return <React.Fragment>{children || content}</React.Fragment>;\r\n};\r\n\r\nexport const WizardFormPage = ({ header, content, children }) => {\r\n    const isChildrenArr = !!children?.length;\r\n\r\n    const otherChildren = isChildrenArr\r\n        ? children.filter(c => {\r\n              if (typeof c === 'string') return false;\r\n              return !c?.props?.isWizardFormHeader;\r\n          })\r\n        : null;\r\n\r\n    const headerChild = isChildrenArr\r\n        ? children.find(c => {\r\n              if (typeof c === 'string') return false;\r\n              return c?.props?.isWizardFormPage;\r\n          })\r\n        : null;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <fieldset>\r\n                <legend>{header || headerChild}</legend>\r\n                {!isChildrenArr ? children || content : otherChildren}\r\n            </fieldset>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport const WizardFormButtons = ({\r\n    pageNumber,\r\n    setPageNumber,\r\n    totalPages,\r\n    onDone,\r\n}) => {\r\n    function goBack() {\r\n        setPageNumber(pageNumber - 1);\r\n    }\r\n\r\n    function goForward() {\r\n        setPageNumber(pageNumber + 1);\r\n    }\r\n\r\n    function formComplete() {\r\n        onDone();\r\n        setPageNumber(0);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Form.Group className='btns' widths='equal'>\r\n                <Form.Field>\r\n                    {pageNumber > 0 ? (\r\n                        <Button fluid onClick={goBack}>\r\n                            <Icon name='arrow left' />\r\n                            Back\r\n                        </Button>\r\n                    ) : null}\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    {pageNumber < totalPages ? (\r\n                        <Button color='green' fluid onClick={goForward}>\r\n                            Next\r\n                            <Icon name='arrow right' />\r\n                        </Button>\r\n                    ) : (\r\n                        <Button color='green' fluid onClick={formComplete}>\r\n                            Done\r\n                            <Icon name='check' style={{ paddingLeft: '8px' }} />\r\n                        </Button>\r\n                    )}\r\n                </Form.Field>\r\n            </Form.Group>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst WizardForm = ({\r\n    fluid,\r\n    className,\r\n    style,\r\n    children,\r\n    pages = [],\r\n    header,\r\n    onDone,\r\n}) => {\r\n    const [pageNumber, setPageNumber] = React.useState(0);\r\n    const isChildrenArr = !!children?.length;\r\n\r\n    let classString = 'wizard';\r\n    if (className) classString += ` ${className}`;\r\n    if (fluid) classString += ` fluid`;\r\n\r\n    const buttons = isChildrenArr\r\n        ? children.find(c => {\r\n              if (typeof c === 'string') return false;\r\n              return c.props?.isWizardFormButtons;\r\n          })\r\n        : children &&\r\n          typeof children !== 'string' &&\r\n          children?.props?.isWizardFormButtons\r\n        ? children\r\n        : null;\r\n\r\n    const wizardPages = isChildrenArr\r\n        ? children.filter(c => {\r\n              if (typeof c === 'string') return false;\r\n              return c.props?.isWizardFormPage;\r\n          })\r\n        : children &&\r\n          typeof children !== 'string' &&\r\n          children?.props?.isWizardFormButtons\r\n        ? [children]\r\n        : null;\r\n\r\n    const wizardHeader = isChildrenArr\r\n        ? children.find(c => {\r\n              if (typeof c === 'string') return false;\r\n              console.log(c);\r\n              return c.props?.isWizardFormHeader;\r\n          })\r\n        : children &&\r\n          typeof children !== 'string' &&\r\n          children?.props?.isWizardFormHeader\r\n        ? children\r\n        : null;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Form className={classString} style={style}>\r\n                <Header as='h1'>\r\n                    {wizardHeader || header || 'Wizard Form'}\r\n                </Header>\r\n                <Grid columns='1'>\r\n                    <Grid.Column textAlign='center'>\r\n                        {(wizardPages || pages).map((p, i) => {\r\n                            return (\r\n                                <React.Fragment key={`page-circle-${i}`}>\r\n                                    <Icon\r\n                                        name={`circle${\r\n                                            i !== pageNumber ? ' outline' : ''\r\n                                        }`}\r\n                                    />\r\n                                </React.Fragment>\r\n                            );\r\n                        })}\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n                {(wizardPages || pages).map((p, i) => {\r\n                    const isCur = i === pageNumber;\r\n                    const isComponent = p.type;\r\n                    return (\r\n                        <React.Fragment key={`wizard-form-page-${i}`}>\r\n                            <div\r\n                                style={{\r\n                                    display: isCur ? 'block' : 'none',\r\n                                }}\r\n                            >\r\n                                {isComponent ? (\r\n                                    p\r\n                                ) : (\r\n                                    <WizardFormPage>\r\n                                        <WizardFormHeader>\r\n                                            {p.header}\r\n                                        </WizardFormHeader>\r\n                                        {p.content}\r\n                                    </WizardFormPage>\r\n                                )}\r\n                            </div>\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n\r\n                <WizardFormButtons\r\n                    buttons={buttons}\r\n                    pageNumber={pageNumber}\r\n                    setPageNumber={setPageNumber}\r\n                    totalPages={(wizardPages || pages).length - 1}\r\n                    onDone={onDone}\r\n                />\r\n            </Form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nWizardForm.Buttons = WizardFormButtons;\r\nWizardForm.Page = WizardFormPage;\r\nWizardForm.Header = WizardFormHeader;\r\n\r\nexport default WizardForm;\r\n","const clientId = `JLBr5npPhV`;\r\n\r\nconst mechanicsApi = `https://api.boardgameatlas.com/api/game/mechanics?client_id=${clientId}`;\r\n\r\nexport async function getMechanics() {\r\n    try {\r\n        const res = await fetch(mechanicsApi);\r\n        const objRes = await res.json();\r\n        return objRes.mechanics || [];\r\n    } catch (e) {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getGameSearch(gameName) {\r\n    const gameSearchApi = `https://api.boardgameatlas.com/api/search?name=${gameName}&client_id=${clientId}`;\r\n    try {\r\n        const res = await fetch(gameSearchApi);\r\n        const objRes = await res.json();\r\n        return objRes.games || [];\r\n    } catch (e) {\r\n        return [];\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Input, Form, Button, Select, TextArea } from 'semantic-ui-react';\r\nimport GamePreview from '../../components/Add/GamePreview';\r\n\r\nimport WizardForm from '../../components/WizardForm';\r\nimport { getGameSearch, getMechanics } from '../../functions/atlas';\r\nimport { addGame } from '../../functions/db';\r\n\r\nconst Add = ({ location: { state } }) => {\r\n    const initialGame = {\r\n        name: '',\r\n        company: '',\r\n        mechanics: [],\r\n        minPlayers: 0,\r\n        maxPlayers: 10,\r\n        minPlaytime: 5,\r\n        maxPlaytime: 15,\r\n        minAge: 3,\r\n        description: '',\r\n        id: 0,\r\n        backupImage: '',\r\n        year: '',\r\n    };\r\n\r\n    const [game, setGame] = React.useState(initialGame);\r\n    const [mechanics, setMechanics] = React.useState(state?.mechanics || null);\r\n    const [mechanicsLoading, setMechanicsLoading] = React.useState(false);\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n    const [customMechanics, setCustomMechanics] = React.useState([]);\r\n    const [addingGame, setAddingGame] = React.useState(false);\r\n    const [isScrollDown, setIsScrollDown] = React.useState(true);\r\n\r\n    React.useState(() => {\r\n        if (!mechanics && !mechanicsLoading) {\r\n            getAllMechanics();\r\n        }\r\n    });\r\n\r\n    async function getAllMechanics() {\r\n        setMechanicsLoading(true);\r\n        const newMechanics = await getMechanics();\r\n        storeMechanics(newMechanics);\r\n        setMechanics(newMechanics);\r\n        setMechanicsLoading(false);\r\n    }\r\n\r\n    function storeMechanics(newMechanics) {\r\n        if (typeof window !== 'undefined') {\r\n            localStorage.state = JSON.stringify({\r\n                ...(state || {}),\r\n                mechanics: newMechanics,\r\n            });\r\n        }\r\n    }\r\n\r\n    async function getCloseGameSearch() {\r\n        if (!game.name) return;\r\n        const newSearchResults = await getGameSearch(game.name);\r\n        setSearchResults(newSearchResults);\r\n    }\r\n\r\n    function changeGame(e, { name, value }) {\r\n        setGame({ ...game, [name]: value });\r\n        if (searchResults.length) setSearchResults([]);\r\n    }\r\n\r\n    function addGameMechanic(e, { value }) {\r\n        setCustomMechanics([...customMechanics, { name: value }]);\r\n    }\r\n\r\n    function toggleSelectGame(gameId, newGame, mechanicsList) {\r\n        if (game.id === gameId) {\r\n            setGame({\r\n                ...initialGame,\r\n                name: game.name,\r\n                company: game.company,\r\n            });\r\n        } else {\r\n            setGame({\r\n                ...game,\r\n                ...newGame,\r\n                mechanics: mechanicsList.map(m => m.name),\r\n            });\r\n        }\r\n        setCustomMechanics([]);\r\n    }\r\n\r\n    async function attemptAddGame() {\r\n        if (!game.id || addingGame) return;\r\n        setAddingGame(true);\r\n        try {\r\n            const gameData = { ...game };\r\n            delete gameData.id;\r\n            const newId = await addGame({\r\n                gameData: gameData,\r\n                user: state.user,\r\n            });\r\n            if (newId) {\r\n                setGame(initialGame);\r\n                setSearchResults([]);\r\n            }\r\n        } catch {}\r\n        setAddingGame(false);\r\n    }\r\n\r\n    function scrollPage() {\r\n        setIsScrollDown(!isScrollDown);\r\n        const contentRef = document.querySelector('.content');\r\n        const newTop = isScrollDown ? contentRef.scrollHeight : 0;\r\n        contentRef.scrollTo({ top: newTop, behavior: 'smooth' });\r\n    }\r\n\r\n    const mechanicsOptions = mechanics\r\n        ? [...customMechanics, ...mechanics].map(m => ({\r\n              text: m.name,\r\n              value: m.name,\r\n          }))\r\n        : [];\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <WizardForm fluid onDone={attemptAddGame}>\r\n                <WizardForm.Header isWizardFormHeader>\r\n                    Add New Game\r\n                </WizardForm.Header>\r\n                <WizardForm.Page isWizardFormPage>\r\n                    <WizardForm.Header isWizardFormHeader>\r\n                        Base Info\r\n                    </WizardForm.Header>\r\n                    <Form.Field>\r\n                        <label htmlFor='name'>Name</label>\r\n                        <Input\r\n                            id='name'\r\n                            name='name'\r\n                            value={game.name}\r\n                            onChange={changeGame}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label htmlFor='company'>Company</label>\r\n                        <Input\r\n                            id='company'\r\n                            name='company'\r\n                            value={game.company}\r\n                            onChange={changeGame}\r\n                        />\r\n                    </Form.Field>\r\n                </WizardForm.Page>\r\n                <WizardForm.Page isWizardFormPage>\r\n                    <WizardForm.Header isWizardFormHeader>\r\n                        Search More Details\r\n                    </WizardForm.Header>\r\n                    <Button\r\n                        type='button'\r\n                        icon='search'\r\n                        content='Search Game'\r\n                        onClick={getCloseGameSearch}\r\n                    />\r\n                    {searchResults.map((g, i) => {\r\n                        return (\r\n                            <GamePreview\r\n                                key={`game-preview-${i}`}\r\n                                {...g}\r\n                                mechanicsRef={mechanics}\r\n                                toggleSelectGame={toggleSelectGame}\r\n                                selectedGame={game}\r\n                            />\r\n                        );\r\n                    })}\r\n                    {searchResults.length > 3 && game.id ? (\r\n                        <Button\r\n                            content={`To ${isScrollDown ? 'Bottom' : 'Top'}`}\r\n                            icon={`arrow ${isScrollDown ? 'down' : 'up'}`}\r\n                            circular\r\n                            color='blue'\r\n                            style={{\r\n                                position: 'fixed',\r\n                                bottom: '20%',\r\n                                left: '75%',\r\n                            }}\r\n                            onClick={scrollPage}\r\n                        />\r\n                    ) : null}\r\n                </WizardForm.Page>\r\n                <WizardForm.Page isWizardFormPage>\r\n                    <WizardForm.Header isWizardFormHeader>\r\n                        Finalize Details\r\n                    </WizardForm.Header>\r\n\r\n                    <Form.Field>\r\n                        <label htmlFor='name'>Name</label>\r\n                        <Input\r\n                            id='name'\r\n                            name='name'\r\n                            value={game.name}\r\n                            onChange={changeGame}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label htmlFor='company'>Company</label>\r\n                        <Input\r\n                            id='company'\r\n                            name='company'\r\n                            value={game.company}\r\n                            onChange={changeGame}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label htmlFor='description'>Description</label>\r\n                        <TextArea\r\n                            id='description'\r\n                            name='description'\r\n                            value={game.description || ''}\r\n                            onChange={changeGame}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label htmlFor='mechanics'>Game Mechanics</label>\r\n                        <Select\r\n                            id='mechanics'\r\n                            name='mechanics'\r\n                            value={game.mechanics}\r\n                            onChange={changeGame}\r\n                            options={mechanicsOptions}\r\n                            multiple\r\n                            clearable\r\n                            search\r\n                            selectOnBlur={false}\r\n                            allowAdditions\r\n                            onAddItem={addGameMechanic}\r\n                        />\r\n                    </Form.Field>\r\n                </WizardForm.Page>\r\n            </WizardForm>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Add;\r\n"],"names":["id","description_preview","image_url","max_players","min_players","max_playtime","min_playtime","mechanics","min_age","name","publisher","year_published","mechanicsRef","toggleSelectGame","selectedGame","mechanicsList","filter","m","find","mech","mechanicsP","map","i","key","color","text","Header","as","Button","size","content","onClick","description","maxPlayers","minPlayers","maxPlaytime","minPlaytime","backupImage","minAge","year","require","WizardFormHeader","children","WizardFormPage","header","isChildrenArr","length","otherChildren","c","props","isWizardFormHeader","headerChild","isWizardFormPage","WizardFormButtons","pageNumber","setPageNumber","totalPages","onDone","Form","className","widths","fluid","Icon","style","paddingLeft","WizardForm","pages","React","classString","buttons","isWizardFormButtons","wizardPages","wizardHeader","console","log","Grid","columns","textAlign","p","isCur","isComponent","type","display","Buttons","Page","clientId","mechanicsApi","getMechanics","fetch","res","json","objRes","getGameSearch","gameName","gameSearchApi","games","state","location","initialGame","company","game","setGame","setMechanics","mechanicsLoading","setMechanicsLoading","searchResults","setSearchResults","customMechanics","setCustomMechanics","addingGame","setAddingGame","isScrollDown","setIsScrollDown","storeMechanics","newMechanics","window","localStorage","JSON","stringify","newSearchResults","changeGame","e","value","gameId","newGame","gameData","addGame","user","getAllMechanics","mechanicsOptions","htmlFor","Input","onChange","icon","g","circular","position","bottom","left","contentRef","document","querySelector","newTop","scrollHeight","scrollTo","top","behavior","TextArea","Select","options","multiple","clearable","search","selectOnBlur","allowAdditions","onAddItem"],"sourceRoot":""}